4 fundamental OS concepts
- thread
- address space w/ tranlation
- process
- dual mode operation/protection

single and multithreaded processes
code, register, stack

illision of multiple processor

simultaneous multithreading/ hyperthreading
- hardware technique (architecture)
- can shcedule each thread
- original technique (SM)

user/ kernel(previledged) mode

a simple address translation (B&B)
- base address
- can the program touch OS?
- can it touch other program?

address mapping
- physical address space
- translation map
- virtual address

putting it together: web server
syscall -- wait -- RTU -- interrupt

running many programs
basic mechanism to
- switch between user processes and the kernel
- kernel can switch among user processes
- protect OS from process

process control block
kernel represents each process as PCB
- status (running, ready, blocked, ...)
- PID
- register state
- execution time
- memory space

scheduler
scheduling
- fairness
- realtime
- latency

implementation safe kernel mode transfers

need for separate kernel stacks
- two stack model (running, ready to run, waiting for I/O)
	- user stack
	- kernel stack

kernel system call handler
- kernel memory
- user memory

hardware support: interrupt control

interupt controller

how do we take interrupts safely?

can a process create a process?
return value from fork: integer
- parent when > 0
- child when = 0
- error when < 0

UNIX prcess management

shell

C API standard stream


